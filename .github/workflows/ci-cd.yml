name: AHMAD CI-CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  checks: write

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: payroll-app
  ECS_CLUSTER: payroll-app-cluster
  ECS_SERVICE: payroll-app-service
  ECS_TASK_DEFINITION: payroll-app-task
  CONTAINER_NAME: payroll-app

jobs:
  # ========================================
  # STAGE 1: BUILD & TEST
  # ========================================
  test:
    runs-on: ubuntu-latest
    name: run tests
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Unit Tests
      run: |
        echo " Running unit tests..."
        mvn clean test -B
        
    - name:  Generate Reports
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Results
        path: target/surefire-reports/*.xml
        reporter: java-junit
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build Application
      run: |
        echo "Building application..."
        mvn clean package -DskipTests -B

  # ========================================
  # STAGE 2: DOCKER BUILD & PUSH TO ECR
  # ========================================
  build:
    runs-on: ubuntu-latest
    needs: test
    name: Build Images
    if: github.ref == 'refs/heads/main'
    
    outputs:
      image: ${{ steps.build-image.outputs.image }}
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build Application
      run: mvn clean package -DskipTests -B
      
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build Push Docker Image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Building Docker image..."
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        echo "üì§ Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "‚úÖ Image pushed successfully!"
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  # ========================================
  # STAGE 3: DEPLOY TO AWS ECS WITH DATABASE
  # ========================================
  deploy:
    runs-on: ubuntu-latest
    needs: build
    name: Deploy with Database
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1
        
    - name: Setup Infrastructure
      run: |
        # Get actual AWS Account ID dynamically
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        echo "Using AWS Account ID: $ACCOUNT_ID"
        
        # Get the ACTUAL RDS endpoint dynamically (CRITICAL FIX)
        ACTUAL_DB_HOST=$(aws rds describe-db-instances --db-instance-identifier payroll-prod-db --query 'DBInstances[0].Endpoint.Address' --output text --region us-east-1)
        echo "Using ACTUAL RDS endpoint: $ACTUAL_DB_HOST"
        
        # Ensure security group exists with correct rules
        VPC_ID=$(aws ec2 describe-vpcs --filters Name=isDefault,Values=true --query 'Vpcs[0].VpcId' --output text)
        
        # Create or update security group
        SG_ID=$(aws ec2 describe-security-groups --filters Name=group-name,Values=payroll-sg --query 'SecurityGroups[0].GroupId' --output text --region us-east-1 2>/dev/null)
        if [ "$SG_ID" = "None" ] || [ -z "$SG_ID" ]; then
          echo "Creating security group..."
          SG_ID=$(aws ec2 create-security-group --group-name payroll-sg --description "Security group for payroll app" --vpc-id $VPC_ID --query 'GroupId' --output text --region us-east-1)
        fi
        
        # Ensure port 8080 is open (for Swagger/API)
        aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 8080 --cidr 0.0.0.0/0 --region us-east-1 2>/dev/null || echo "Port 8080 already open"
        
        # Ensure port 5432 is open (for PostgreSQL)
        aws ec2 authorize-security-group-ingress --group-id $SG_ID --protocol tcp --port 5432 --cidr 0.0.0.0/0 --region us-east-1 2>/dev/null || echo "Port 5432 already open"
        
        echo "Security Group ID: $SG_ID"
        
        # Create production task definition with CORRECT settings
        cat > prod-task-def.json << EOF
        {
          "family": "payroll-app-task",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "512",
          "executionRoleArn": "arn:aws:iam::${ACCOUNT_ID}:role/LabRole",
          "taskRoleArn": "arn:aws:iam::${ACCOUNT_ID}:role/LabRole",
          "containerDefinitions": [
            {
              "name": "payroll-app",
              "image": "${{ needs.build.outputs.image }}",
              "portMappings": [{"containerPort": 8080, "protocol": "tcp"}],
              "environment": [
                {"name": "SPRING_PROFILES_ACTIVE", "value": "prod"},
                {"name": "SPRING_JPA_HIBERNATE_DDL_AUTO", "value": "create"},
                {"name": "DB_HOST", "value": "${ACTUAL_DB_HOST}"},
                {"name": "DB_NAME", "value": "payroll_prod"},
                {"name": "DB_USERNAME", "value": "payroll_user"},
                {"name": "DB_PASSWORD", "value": "SecurePassword123!"},
                {"name": "JWT_SECRET", "value": "production-super-secure-jwt-secret-key-12345"},
                {"name": "MAIL_HOST", "value": "smtp.gmail.com"},
                {"name": "MAIL_PORT", "value": "587"},
                {"name": "MAIL_USERNAME", "value": "rawang17@gmail.com"},
                {"name": "MAIL_PASSWORD", "value": "fswc bscf gnyb iewm"},
                {"name": "SPRINGDOC_SWAGGER_UI_ENABLED", "value": "true"},
                {"name": "SPRINGDOC_API_DOCS_ENABLED", "value": "true"}
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/payroll-app",
                  "awslogs-region": "us-east-1",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ]
        }
        EOF
        
        echo "Task definition created with CORRECT DB endpoint: $ACTUAL_DB_HOST"
        
        # Register new task definition
        NEW_TASK_ARN=$(aws ecs register-task-definition --cli-input-json file://prod-task-def.json --query 'taskDefinition.taskDefinitionArn' --output text)
        echo "Task definition registered: $NEW_TASK_ARN"
        
        # Get network configuration
        SUBNET_IDS=$(aws ec2 describe-subnets --filters Name=vpc-id,Values=$VPC_ID Name=map-public-ip-on-launch,Values=true --query 'Subnets[*].SubnetId' --output text | tr '[:space:]' ',' | sed 's/,$//g')
        
        echo "Network config - VPC: $VPC_ID, Subnets: $SUBNET_IDS, SG: $SG_ID"
        
        # Check if service exists, if not create it, if yes update it
        SERVICE_EXISTS=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0].status' --output text --region us-east-1 2>/dev/null)
        
        if [ "$SERVICE_EXISTS" = "ACTIVE" ]; then
          echo "Updating existing service..."
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition $NEW_TASK_ARN \
            --region us-east-1
        else
          echo "Creating new service..."
          aws ecs create-service \
            --cluster $ECS_CLUSTER \
            --service-name $ECS_SERVICE \
            --task-definition $NEW_TASK_ARN \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_IDS],securityGroups=[$SG_ID],assignPublicIp=ENABLED}" \
            --region us-east-1
        fi
        
        echo "Service deployment initiated!"
        
        # Wait for service to stabilize
        echo "‚è≥ Waiting for service to stabilize..."
        aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE --region us-east-1
        echo "Service is stable!"
        
    - name: Get Endpoints
      run: |
        # Wait a bit more for full startup
        sleep 30
        
        # Get new public IP
        TASK_ARN=$(aws ecs list-tasks --cluster $ECS_CLUSTER --query 'taskArns[0]' --output text --region us-east-1)
        if [ "$TASK_ARN" != "None" ] && [ ! -z "$TASK_ARN" ]; then
          ENI_ID=$(aws ecs describe-tasks --cluster $ECS_CLUSTER --tasks $TASK_ARN --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text --region us-east-1)
          PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID --query 'NetworkInterfaces[0].Association.PublicIp' --output text --region us-east-1)
          
          echo ""
          echo "üéâ ========================================"
          echo "üéâ PRODUCTION WITH DATABASE DEPLOYED!"
          echo "üéâ ========================================"
          echo ""
          echo "üåê Your Production Application:"
          echo "   üîó Swagger UI: http://$PUBLIC_IP:8080/swagger-ui/index.html"
          echo "   üíö Health: http://$PUBLIC_IP:8080/actuator/health"
          echo "   üì° API: http://$PUBLIC_IP:8080/employees"
          echo "   üîê Login: http://$PUBLIC_IP:8080/auth/login"
          echo ""
          echo "üß™ Quick test:"
          echo "   curl http://$PUBLIC_IP:8080/actuator/health"
          
          # Health check
          echo ""
          echo "üîç Performing health check..."
          sleep 15  # Give app time to fully start
          
          if curl -f -s http://$PUBLIC_IP:8080/actuator/health > /dev/null; then
            echo "‚úÖ Health check PASSED - Application is healthy!"
            echo "‚úÖ Swagger should be accessible at: http://$PUBLIC_IP:8080/swagger-ui/index.html"
          else
            echo "‚ö†Ô∏è Health check pending - Application may still be starting..."
            echo "üí° Check logs: aws logs tail /ecs/payroll-app --region us-east-1 --since 5m"
          fi
        else
          echo "‚ùå No tasks found - check service status"
        fi

  # ========================================
  # STAGE 4: VALIDATION & NOTIFICATION
  # ========================================
  validate:
    runs-on: ubuntu-latest
    needs: deploy
    name: Validate & CHECK
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Success Notification
      run: |
        echo ""
        echo "üéä ====================================="
        echo "üéä FULL CI/CD PIPELINE SUCCESSFUL!"
        echo "üéä ====================================="
        echo ""
        echo "üîÑ What just happened automatically:"
        echo "   1. ‚úÖ Code pushed to GitHub"
        echo "   2. ‚úÖ Tests ran and passed"
        echo "   3. ‚úÖ Docker image built"
        echo "   4. ‚úÖ Image pushed to ECR"
        echo "   5. ‚úÖ ECS service updated with CORRECT database"
        echo "   6. ‚úÖ Security groups configured properly"
        echo "   7. ‚úÖ Swagger UI enabled and accessible!"
        echo ""
        echo "üéØ TRUE PRODUCTION CI/CD ACHIEVED!"
